<?php
// TODO: fold this logic into record driver methods at some point:
$marc = $this->driver->tryMethod('getMarcRecord');
if (is_object($marc)) {
    $marcPhdField = $marc->getField('502');
    $marcProceedingsField = $marc->getField('711');
} else {
    $marcPhdField = $marcProceedingsField = false;
}
$journalTitle = $this->driver->tryMethod('getContainerTitle');
$formats = $this->driver->tryMethod('getFormats');
if ($marcProceedingsField) {
    $format = 'proceedings';
} elseif ($marcPhdField) {
    $format = 'phdthesis';
} elseif ((is_array($formats) && in_array('Book', $formats)) || !empty($this->driver->tryMethod('getISBNs'))) {
    $format = 'book';
} elseif (!empty($journalTitle) || (is_array($formats) && in_array('Article', $formats))) {
    $format = 'article';
} else {
    $format = 'misc';
}

// Open format tag:
echo '@' . $format . "{\n";

// Citation key:
echo $this->driver->getSourceIdentifier() . '-' . $this->driver->getUniqueId() . ",\n";

$title = rtrim($this->driver->getTitle(), " /");
echo "title = {{$title}},\n";

foreach ($this->driver->tryMethod('getSummary') as $summary) {
	echo "abstract = {".$summary."},\n";
}
if (!empty($journalTitle)) {
    echo "journal = {{$journalTitle}},\n";
    $volume = $this->driver->tryMethod('getContainerVolume');
    if (!empty($volume)) {
        echo "volume = {{$volume}},\n";
    }
    $number = $this->driver->tryMethod('getContainerIssue');
    if (!empty($number)) {
        echo "number = {{$number}},\n";
    }
    $start = $this->driver->tryMethod('getContainerStartPage');
    $end = $this->driver->tryMethod('getContainerEndPage');
    if (!empty($start)) {
        // use page range if possible
        if (!empty($end)) {
            echo "pages = {{$start}-{$end}},\n";
        } else {
            // use only start page
            echo "pages = {{$start}},\n";
        }
    }
}

$series = $this->driver->tryMethod('getSeries');
if (is_array($series)) {
    foreach ($series as $current) {
        echo "series = {" . (is_array($current) ? $current['name'] : $current) . "},\n";
    }
}

$author = $this->driver->tryMethod('getPrimaryAuthor');
if (!empty($author)) {
    echo "author = {{$author}},\n";
}

$secondaryAuthors = $this->driver->tryMethod('getSecondaryAuthors');
if (is_array($secondaryAuthors)) {
    foreach ($secondaryAuthors as $current) {
        echo "author = {{$current}},\n";
    }
}

$pubPlaces = $this->driver->tryMethod('getPlacesOfPublication');
$pubDates = $this->driver->tryMethod('getPublicationDates');
$pubNames = $this->driver->tryMethod('getPublishers');
if (is_array($pubPlaces) && is_array($pubDates) && is_array($pubNames)) {
    $total = min(count($pubPlaces), count($pubDates), count($pubNames));
    // if we have pub dates but no other details, we still want to export the year:
    if ($total == 0 && count($pubDates) > 0) {
        $total = 1;
    }
    for ($i = 0; $i < $total; $i++) {
        if (isset($pubPlaces[$i])) {
            echo "address = {" . rtrim(str_replace(['[', ']'], '', $pubPlaces[$i]), ': ') . "},\n";
        }
        if (isset($pubNames[$i])) {
            echo "publisher = {" . rtrim($pubNames[$i], ", ") . "},\n";
        }
        $date = trim($pubDates[$i], '[]. ');
        if (strlen($date) > 4) {
            $date = $this->dateTime()->extractYear($date);
        }
        if ($date) {
            echo "year = {{$date}},\n";
        }
    }
}

$isbns = $this->driver->tryMethod('getISBNs');
if (is_array($isbns)) {
    foreach ($isbns as $isbn)
	{
		echo "isbn = {{$isbn}},\n";
    }
}

$issns = $this->driver->tryMethod('getISSNs');
if (is_array($issns)) {
    foreach ($issns as $issn) {
		echo "issn = {{$issn}},\n";
    }
}

$doi = $this->driver->tryMethod('getDOI');
if (!empty($doi)) {
	echo "doi = {{$doi}},\n";
}

$edition = $this->driver->tryMethod('getEdition');
if (!empty($edition)) {
    echo "edition = {{$edition}},\n";
}

if ($marcPhdField && $subfield = $marcPhdField->getSubfield('a')) {
    echo "school = {" . $subfield->getData() . "},\n";
}

// Try to find a page count in the physical description:
$physical = $this->driver->tryMethod('getPhysicalDescriptions');
if (is_array($physical)) {
    foreach ($physical as $current) {
        if (preg_match('/([0-9]+)\s*p/', $current, $matches)) {
            echo "pages = {{$matches[1]}},\n";
            break;
        }
    }
}									  

$school = $this->driver->tryMethod('getPhysicalDescriptions');
if ($format == 'phdthesis' && $school) {
	echo "school = {".$school."},\n";
}

//Keywords
foreach ($this->driver->tryMethod('getFormalSubjectHeadings') as $subject) {
	if(!empty($subject)) {
	echo "keywords = {{$subject}},\n";
	}
}

//Keywords
foreach ($this->driver->tryMethod('getAllSubjectHeadings') as $field) {
	$subject = $field[0];
	if(!empty($subject)) {
		echo "keywords = {{$subject}},\n";
	}
}

// Access Date
$today = date("Y-m-d");
echo "note = {Access date: {$today}},\n";
		
// Access link
$record_url = $this->serverUrl($this->recordLink()->getUrl($this->driver));
echo "note = {Source: {$record_url}},\n";

$notes = $this->driver->tryMethod('getGeneralNotes');
if (is_array($notes)) {
    foreach ($notes as $note) {
        echo "note = {{$note}},\n";
    }
}

foreach ($this->record($this->driver)->getUrlList() as $url) {
    echo "url = {{$url}}\n";
}

// Record separator:
echo "}\n\n";
?>
